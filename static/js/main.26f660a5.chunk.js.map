{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","files","setFiles","file2","setFiles2","raw1","setRaw1","raw2","setRaw2","valid","setValid","loading","setLoading","className","multiple","onDone","base64","fileName","name","fileType","type","split","photo","getFiles","getFiles2","onClick","data","axios","post","then","response","isValid","src","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,6JC+D5BC,MAzDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEcF,mBAAS,IAFvB,mBAENG,EAFM,KAECC,EAFD,OAGWJ,mBAAS,IAHpB,mBAGNK,EAHM,KAGAC,EAHA,OAIWN,mBAAS,IAJpB,mBAINO,EAJM,KAIAC,EAJA,OAKaR,mBAAS,MALtB,mBAKNS,EALM,KAKCC,EALD,OAMiBV,oBAAS,GAN1B,mBAMNW,EANM,KAMGC,EANH,KA+Bb,OACE,yBAAKC,UAAU,OACb,6BACE,kBAAC,IAAD,CACEC,UAAU,EACVC,OAAQ,SAACd,GAAD,OA1BC,SAACA,GAChBK,EAAQL,EAAM,GAAGe,QACjBd,EAAS,CAAEe,SAAUhB,EAAM,GAAGiB,KAAMC,SAAUlB,EAAM,GAAGmB,KAAKC,MAAM,KAAK,GAAIC,MAAOrB,EAAM,GAAGe,OAAOK,MAAM,KAAK,KAwBpFE,CAAStB,MAC9B,kBAAC,IAAD,CACEa,UAAU,EACVC,OAAQ,SAACd,GAAD,OAzBE,SAACA,GACjBO,EAAQP,EAAM,GAAGe,QACjBZ,EAAU,CAAEa,SAAUhB,EAAM,GAAGiB,KAAMC,SAAUlB,EAAM,GAAGmB,KAAKC,MAAM,KAAK,GAAIC,MAAOrB,EAAM,GAAGe,OAAOK,MAAM,KAAK,KAuBrFG,CAAUvB,MAE/B,4BAAQwB,QArBC,WACb,IAAIC,EAAO,CAACzB,EAAOE,GACnBS,GAAW,GACXF,EAAS,MACTiB,IAAMC,KAAK,6CAA8CF,GACtDG,MAAK,SAACC,GACLlB,GAAW,GACXF,EAASoB,EAASJ,KAAKK,cAcvB,WAIF,yBAAKlB,UAAU,UACZR,GAAQ,yBAAK2B,IAAG,UAAK3B,GAAQ4B,MAAO,MACpC1B,GAAQ,yBAAKyB,IAAG,UAAKzB,GAAQ0B,MAAO,QAErCtB,GAAW,yBAAKE,UAAS,iBAAYJ,EAAQ,QAAU,QAC5C,OAAVA,EAAiB,GAAKA,EAAQ,QAAU,cC5C7ByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.26f660a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport axios from 'axios'\nimport FileBase64 from 'react-file-base64';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [files, setFiles] = useState({})\n  const [file2, setFiles2] = useState({})\n  const [raw1, setRaw1] = useState('')\n  const [raw2, setRaw2] = useState('')\n  const [valid, setValid] = useState(null)\n  const [loading, setLoading] = useState(false)\n\n\n\n  const getFiles = (files) => {\n    setRaw1(files[0].base64)\n    setFiles({ fileName: files[0].name, fileType: files[0].type.split('/')[1], photo: files[0].base64.split(',')[1] })\n  }\n  const getFiles2 = (files) => {\n    setRaw2(files[0].base64)\n    setFiles2({ fileName: files[0].name, fileType: files[0].type.split('/')[1], photo: files[0].base64.split(',')[1] })\n\n\n  }\n  const submit = () => {\n    let data = [files, file2]\n    setLoading(true)\n    setValid(null)\n    axios.post('https://ca38fe5442dc.ngrok.io/face-compare', data)\n      .then((response) => {\n        setLoading(false)\n        setValid(response.data.isValid)\n\n      })\n  }\n  return (\n    <div className=\"App\">\n      <div>\n        <FileBase64\n          multiple={true}\n          onDone={(files) => getFiles(files)} />\n        <FileBase64\n          multiple={true}\n          onDone={(files) => getFiles2(files)} />\n\n        <button onClick={submit} >Submit</button>\n      </div>\n\n\n      <div className=\"images\">\n        {raw1 && <img src={`${raw1}`} width={100} />}\n        {raw2 && <img src={`${raw2}`} width={100} />}\n      </div>\n      {!loading && <div className={`result ${valid ? 'green' : 'red'}`}>\n        {valid === null ? '' : valid ? 'Match' : 'No Match'}\n      </div>}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}